// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://github.com/akramboussanni/gocode/blob/main/LICENSE",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/akramboussanni/gocode/issues",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://github.com/akramboussanni/gocode/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change user password while authenticated. Requires current password verification and new password must meet security requirements.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Password Management"
                ],
                "summary": "Change password (authenticated)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Current password and new password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.PasswordChangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid password format or requirements not met",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or incorrect current password",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded (5 requests per minute)",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/confirm-email": {
            "post": {
                "description": "Confirm user's email address using the confirmation token sent during registration. Token expires after 24 hours.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email Verification"
                ],
                "summary": "Confirm email address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "reCAPTCHA verification token",
                        "name": "X-Recaptcha-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Email confirmation token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email confirmed successfully - user can now login",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or missing token",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired confirmation token",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded (5 requests per minute)",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/forgot-password": {
            "post": {
                "description": "Send password reset email to user's email address. A reset token will be generated and sent via email with a 1-hour expiration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Password Management"
                ],
                "summary": "Request password reset email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "reCAPTCHA verification token",
                        "name": "X-Recaptcha-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User email and reset URL",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.EmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset email sent successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or missing email",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not found with provided email",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded (5 requests per minute)",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or email sending failure",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Authenticate user with email and password, returning session and refresh JWT tokens. User must have confirmed their email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticate user and get JWT tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "reCAPTCHA verification token",
                        "name": "X-Recaptcha-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successful - returns session and refresh tokens",
                        "schema": {
                            "$ref": "#/definitions/handler.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or email not confirmed",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded (8 requests per minute)",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout the current user by revoking their JWT session token. The token will be added to the blacklist and cannot be used again.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Logout user and revoke session",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout successful - session token revoked",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing JWT token",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded (8 requests per minute)",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during token revocation",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the current authenticated user's profile information. Returns safe user data (excluding sensitive fields like password hash).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get current user profile",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                        "description": "Bearer JWT token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile information (safe fields only)",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing JWT token",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded (30 requests per minute)",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/refresh": {
            "post": {
                "description": "Refresh user's JWT tokens using a valid refresh token. The old refresh token will be revoked and new session/refresh tokens will be issued.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh JWT tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "reCAPTCHA verification token",
                        "name": "X-Recaptcha-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refresh successful - returns new session and refresh tokens",
                        "schema": {
                            "$ref": "#/definitions/handler.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or missing token",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid, expired, or revoked refresh token",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded (8 requests per minute)",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "Register a new user account with email confirmation. The system will validate credentials, check for duplicates, hash the password, and send a confirmation email. Username cannot contain '@' symbol.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register new user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "reCAPTCHA verification token",
                        "name": "X-Recaptcha-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User registration credentials including confirmation URL",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User account created successfully - confirmation email sent",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid credentials, duplicate username, or validation errors",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded (2 requests per minute)",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or email sending failure",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/resend-confirmation": {
            "post": {
                "description": "Resend email confirmation token to user's email address. Useful if the original confirmation email was not received or expired.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email Verification"
                ],
                "summary": "Resend email confirmation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "reCAPTCHA verification token",
                        "name": "X-Recaptcha-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User email and confirmation URL",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.EmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Confirmation email sent successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or missing email",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not found or email already confirmed",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded (5 requests per minute)",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or email sending failure",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/reset-password": {
            "post": {
                "description": "Reset user password using a reset token sent via email. Token expires after 1 hour. New password must meet security requirements.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Password Management"
                ],
                "summary": "Reset password with token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "reCAPTCHA verification token",
                        "name": "X-Recaptcha-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Reset token and new password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.PasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid password format or requirements not met",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired reset token",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded (5 requests per minute)",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ErrorResponse": {
            "description": "Standard error response",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request format"
                }
            }
        },
        "api.SuccessResponse": {
            "description": "Standard success response",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                }
            }
        },
        "handler.EmailRequest": {
            "description": "Email-based request for password reset and email confirmation resend",
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@example.com"
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/reset"
                }
            }
        },
        "handler.LoginRequest": {
            "description": "User login credentials",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "SecurePass123!"
                }
            }
        },
        "handler.LoginResponse": {
            "description": "Authentication response containing JWT tokens",
            "type": "object",
            "properties": {
                "refresh": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMjM0NTY3ODkwLCJ0b2tlbl9pZCI6ImFiY2RlZiIsImlhdCI6MTY0MDk5NTIwMCwiZXhwIjoxNjQwOTk1MjAwLCJlbWFpbCI6ImpvaG5AZXhhbXBsZS5jb20iLCJyb2xlIjoidXNlciJ9.signature"
                },
                "session": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMjM0NTY3ODkwLCJ0b2tlbl9pZCI6ImFiY2RlZiIsImlhdCI6MTY0MDk5NTIwMCwiZXhwIjoxNjQwOTk1MjAwLCJlbWFpbCI6ImpvaG5AZXhhbXBsZS5jb20iLCJyb2xlIjoidXNlciJ9.signature"
                }
            }
        },
        "handler.PasswordChangeRequest": {
            "description": "Password change request requiring current password verification",
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "NewSecurePass123!"
                },
                "old_password": {
                    "type": "string",
                    "example": "OldSecurePass123!"
                }
            }
        },
        "handler.PasswordResetRequest": {
            "description": "Password reset request with token and new password",
            "type": "object",
            "required": [
                "new_password",
                "token"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "NewSecurePass123!"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "handler.RegisterRequest": {
            "description": "User registration request with email confirmation",
            "type": "object",
            "required": [
                "email",
                "password",
                "url",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@example.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "SecurePass123!"
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/confirm"
                },
                "username": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3,
                    "example": "johndoe"
                }
            }
        },
        "handler.TokenRequest": {
            "description": "Token-based request for various operations (email confirmation, password reset, token refresh)",
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "model.User": {
            "description": "User model with profile information",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer",
                    "example": 1640995200
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 123456789
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT Bearer token for authenticated endpoints. Format: \"Bearer \u003ctoken\u003e\". Required for endpoints marked with @Security BearerAuth.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "RecaptchaToken": {
            "description": "reCAPTCHA verification token for bot protection. Required for public endpoints to prevent abuse. Obtain from reCAPTCHA widget.",
            "type": "apiKey",
            "name": "X-Recaptcha-Token",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "User registration, login, and token management endpoints. Most endpoints require reCAPTCHA verification.",
            "name": "Authentication"
        },
        {
            "description": "User profile and account management endpoints. All endpoints require JWT authentication.",
            "name": "Account"
        },
        {
            "description": "Email confirmation and verification endpoints. All endpoints require reCAPTCHA verification.",
            "name": "Email Verification"
        },
        {
            "description": "Password reset, change, and recovery endpoints. Public endpoints require reCAPTCHA, authenticated endpoints require JWT.",
            "name": "Password Management"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:9520",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "gocode API",
	Description:      "A secure, fast, and feature-rich Go-Chi backend with JWT authentication, email verification, and password management. Built with modern Go practices and comprehensive security features.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
