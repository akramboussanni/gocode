basePath: /
definitions:
  api.ErrorResponse:
    description: Standard error response
    properties:
      error:
        example: Invalid request format
        type: string
    type: object
  api.SuccessResponse:
    description: Standard success response
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  handler.EmailRequest:
    description: Email-based request for password reset and email confirmation resend
    properties:
      email:
        example: john@example.com
        format: email
        type: string
      url:
        example: https://example.com/reset
        format: uri
        type: string
    required:
    - email
    type: object
  handler.LoginRequest:
    description: User login credentials
    properties:
      email:
        example: john@example.com
        format: email
        type: string
      password:
        example: SecurePass123!
        type: string
    required:
    - email
    - password
    type: object
  handler.LoginResponse:
    description: Authentication response containing JWT tokens
    properties:
      refresh:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMjM0NTY3ODkwLCJ0b2tlbl9pZCI6ImFiY2RlZiIsImlhdCI6MTY0MDk5NTIwMCwiZXhwIjoxNjQwOTk1MjAwLCJlbWFpbCI6ImpvaG5AZXhhbXBsZS5jb20iLCJyb2xlIjoidXNlciJ9.signature
        type: string
      session:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMjM0NTY3ODkwLCJ0b2tlbl9pZCI6ImFiY2RlZiIsImlhdCI6MTY0MDk5NTIwMCwiZXhwIjoxNjQwOTk1MjAwLCJlbWFpbCI6ImpvaG5AZXhhbXBsZS5jb20iLCJyb2xlIjoidXNlciJ9.signature
        type: string
    type: object
  handler.PasswordChangeRequest:
    description: Password change request requiring current password verification
    properties:
      new_password:
        example: NewSecurePass123!
        minLength: 8
        type: string
      old_password:
        example: OldSecurePass123!
        type: string
    required:
    - new_password
    - old_password
    type: object
  handler.PasswordResetRequest:
    description: Password reset request with token and new password
    properties:
      new_password:
        example: NewSecurePass123!
        minLength: 8
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - new_password
    - token
    type: object
  handler.RegisterRequest:
    description: User registration request with email confirmation
    properties:
      email:
        example: john@example.com
        format: email
        type: string
      password:
        example: SecurePass123!
        minLength: 8
        type: string
      url:
        example: https://example.com/confirm
        format: uri
        type: string
      username:
        example: johndoe
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - password
    - url
    - username
    type: object
  handler.TokenRequest:
    description: Token-based request for various operations (email confirmation, password
      reset, token refresh)
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - token
    type: object
  model.User:
    description: User model with profile information
    properties:
      created_at:
        example: 1640995200
        type: integer
      email:
        example: john@example.com
        type: string
      id:
        example: 123456789
        type: integer
      role:
        example: user
        type: string
      username:
        example: johndoe
        type: string
    type: object
host: localhost:9520
info:
  contact:
    email: support@example.com
    name: API Support
    url: https://github.com/akramboussanni/gocode/issues
  description: A secure, fast, and feature-rich Go-Chi backend with JWT authentication,
    email verification, and password management. Built with modern Go practices and
    comprehensive security features.
  license:
    name: MIT License
    url: https://github.com/akramboussanni/gocode/blob/main/LICENSE
  termsOfService: https://github.com/akramboussanni/gocode/blob/main/LICENSE
  title: gocode API
  version: 1.0.0
paths:
  /api/auth/change-password:
    post:
      consumes:
      - application/json
      description: Change user password while authenticated. Requires current password
        verification and new password must meet security requirements.
      parameters:
      - description: Current password and new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.PasswordChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            type: string
        "400":
          description: Invalid password format or requirements not met
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized or incorrect current password
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "429":
          description: Rate limit exceeded (5 requests per minute)
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change password (authenticated)
      tags:
      - Password Management
  /api/auth/confirm-email:
    post:
      consumes:
      - application/json
      description: Confirm user's email address using the confirmation token sent
        during registration. Token expires after 24 hours.
      parameters:
      - description: Email confirmation token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email confirmed successfully - user can now login
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Invalid request format or missing token
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Invalid or expired confirmation token
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "429":
          description: Rate limit exceeded (5 requests per minute)
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Confirm email address
      tags:
      - Email Verification
  /api/auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send password reset email to user's email address. A reset token
        will be generated and sent via email with a 1-hour expiration.
      parameters:
      - description: User email and reset URL
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.EmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent successfully
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Invalid request format or missing email
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: User not found with provided email
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "429":
          description: Rate limit exceeded (5 requests per minute)
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error or email sending failure
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Request password reset email
      tags:
      - Password Management
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, returning session and
        refresh JWT tokens. User must have confirmed their email address.
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful - returns session and refresh tokens
          schema:
            $ref: '#/definitions/handler.LoginResponse'
        "400":
          description: Invalid request format or missing required fields
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Invalid credentials or email not confirmed
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "429":
          description: Rate limit exceeded (8 requests per minute)
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Authenticate user and get JWT tokens
      tags:
      - Authentication
  /api/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout the current user by revoking their JWT session token. The
        token will be added to the blacklist and cannot be used again.
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful - session token revoked
          schema:
            type: string
        "401":
          description: Unauthorized - invalid or missing JWT token
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "429":
          description: Rate limit exceeded (8 requests per minute)
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error during token revocation
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user and revoke session
      tags:
      - Account
  /api/auth/me:
    get:
      consumes:
      - application/json
      description: Retrieve the current authenticated user's profile information.
        Returns safe user data (excluding sensitive fields like password hash).
      produces:
      - application/json
      responses:
        "200":
          description: User profile information (safe fields only)
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: Unauthorized - invalid or missing JWT token
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "429":
          description: Rate limit exceeded (30 requests per minute)
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - Account
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh user's JWT tokens using a valid refresh token. The old
        refresh token will be revoked and new session/refresh tokens will be issued.
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refresh successful - returns new session and refresh
            tokens
          schema:
            $ref: '#/definitions/handler.LoginResponse'
        "400":
          description: Invalid request format or missing token
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Invalid, expired, or revoked refresh token
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "429":
          description: Rate limit exceeded (8 requests per minute)
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Refresh JWT tokens
      tags:
      - Authentication
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with email confirmation. The system
        will validate credentials, check for duplicates, hash the password, and send
        a confirmation email. Username cannot contain '@' symbol.
      parameters:
      - description: User registration credentials including confirmation URL
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User account created successfully - confirmation email sent
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Invalid credentials, duplicate username, or validation errors
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "429":
          description: Rate limit exceeded (2 requests per minute)
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error or email sending failure
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Register new user account
      tags:
      - Authentication
  /api/auth/resend-confirmation:
    post:
      consumes:
      - application/json
      description: Resend email confirmation token to user's email address. Useful
        if the original confirmation email was not received or expired.
      parameters:
      - description: User email and confirmation URL
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.EmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Confirmation email sent successfully
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Invalid request format or missing email
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: User not found or email already confirmed
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "429":
          description: Rate limit exceeded (5 requests per minute)
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error or email sending failure
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Resend email confirmation
      tags:
      - Email Verification
  /api/auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using a reset token sent via email. Token expires
        after 1 hour. New password must meet security requirements.
      parameters:
      - description: Reset token and new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            type: string
        "400":
          description: Invalid password format or requirements not met
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Invalid or expired reset token
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "429":
          description: Rate limit exceeded (5 requests per minute)
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Reset password with token
      tags:
      - Password Management
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: 'Type "Bearer" followed by a space and JWT token. Example: "Bearer
      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: User registration, login, and token management endpoints
  name: Authentication
- description: User profile and account management endpoints
  name: Account
- description: Email confirmation and verification endpoints
  name: Email Verification
- description: Password reset, change, and recovery endpoints
  name: Password Management
